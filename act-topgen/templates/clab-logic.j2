{# Build nodes_data.nodes_list #}
{% set nodes_list = {} %}
{% set avd_ext_nodes = {} %}
{% set unique_links = {} %}
{% set act_links = [] %}
{% set ns = namespace(avd_ext_nodes_count = 0) %}
{% for node in ansible_play_hosts_all | arista.avd.natural_sort %}
{%     if hostvars[node].ethernet_interfaces is defined %}
{%         set node_dict = dict() %}
{%         set nodename = node | replace("_", "-") %}
{%         do node_dict.update({nodename: dict()}) %}
{# {%         do node_dict[nodename].update({"ip_addr": "192.168.0.1" ~ loop.index}) %} #}
{%         set node_mgmt_interfaces = [] %}
{%         if hostvars[node].management_interfaces is defined and hostvars[node].management_interfaces is mapping %}
{%             for ifname, ifdata in hostvars[node].management_interfaces.items() %}
{%                 do ifdata.update({"name": ifname}) %}
{%                 do node_mgmt_interfaces.append(ifdata) %}
{%             endfor %}
{%         elif hostvars[node].management_interfaces is defined %}
{%             set node_mgmt_interfaces = hostvars[node].management_interfaces %}
{%         endif %}
{%         for mgmt_if in node_mgmt_interfaces %}
{%             set node_mgmt_ip = mgmt_if.ip_address | split("/") %}
{%             do node_dict[nodename].update({"mgmt-ipv4": node_mgmt_ip[0]}) %}
{%             do node_dict[nodename].update({"env": {}}) %}
{%             do node_dict[nodename].env.update({"IPV4": node_mgmt_ip[0]}) %}
{%             break %}
{%         endfor %}
{%         do node_dict[nodename].update({"kind": "arista_ceos"}) %}
{%         do node_dict[nodename].update({"startup-config": clab_config_dir ~ "/" ~ nodename ~ ".cfg"}) %}
{%         set node_ethernet_interfaces = [] %}
{#         version 3 of avd uses dict of dicts for interfaces #}
{%         if hostvars[node].ethernet_interfaces is defined and hostvars[node].ethernet_interfaces is mapping %}
{%             for ifname, ifdata in hostvars[node].ethernet_interfaces.items() %}
{%                 do ifdata.update({"name": ifname}) %}
{%                 do node_ethernet_interfaces.append(ifdata) %}
{%             endfor %}
{%         else %}
{%             set node_ethernet_interfaces = hostvars[node].ethernet_interfaces %}
{%         endif %}
{#         building links definition as per new ACT standard #}
{%         if not act_use_old_connections %}
{%             for ifdata in node_ethernet_interfaces %}
{%                 if "peer" in ifdata and "peer_interface" in ifdata and "." not in ifdata.name %}
{#                     add fabric nodes #}
{%                     if ifdata.peer in ansible_play_hosts_all or (act_add_connected_nodes == true and ifdata["peer_type"] in act_connected_nodes_map) %}
{%                         set link_nodes = [node | replace("_", "-"), ifdata.peer | replace("_", "-")] | join("_") %}
{%                         set link_ifs = [ifdata.name, ifdata.peer_interface] | join("_") %}
{%                         if link_nodes not in unique_links %}
{%                             do unique_links.update({link_nodes: [link_ifs]}) %}
{%                         elif link_ifs not in unique_links[link_nodes] %}
{%                             do unique_links[link_nodes].append(link_ifs) %}
{%                         endif %}
{#                         add external nodes to topology while we're looking at peers #}
{%                         if act_add_connected_nodes == true and ifdata["peer_type"] in act_connected_nodes_map %}
{%                             set peer_node = ifdata["peer"] | replace("_", "-") %}
{%                             set avd_ext_node_neighbordict = dict() %}
{%                             if peer_node not in avd_ext_nodes and peer_node not in ansible_play_hosts_all %}
{%                                 do avd_ext_nodes.update({peer_node: dict()}) %}
{%                                 set mgmt_ip = act_connected_nodes_range | ansible.utils.ipaddr('network') | ansible.utils.ipmath(ns.avd_ext_nodes_count)  %}
{%                                 set ns.avd_ext_nodes_count = ns.avd_ext_nodes_count + 1 %}
{%                                 do avd_ext_nodes[peer_node].update({"IPV4": mgmt_ip ~ "/24" }) %}
{%                                 do avd_ext_nodes[peer_node].update({"node_type": act_connected_nodes_map[ifdata["peer_type"]]}) %}
{%                             endif %}
{%                         endif %}
{%                     endif %}
{%                 endif %}
{%             endfor %}
{%             for nodepair, links in unique_links.items() %}
{%                 for ifpair in links %}
{%                     set nodes = nodepair | split("_") %}
{%                     set interfaces = ifpair | split("_") %}
{%                     set interface_0 = interfaces[0] | replace("/", "_") | replace("Ethernet", "eth") %}
{%                     set interface_1 = interfaces[1] | replace("/", "_") | replace("Ethernet", "eth") %}
{%                     set connection = [ nodes[0] ~ ":" ~ interface_0, nodes[1] ~ ":" ~ interface_1 ] | sort %}
{%                     if {"endpoints": connection} not in act_links %}
{%                         do act_links.append({"endpoints": connection}) %}
{%                     endif %}
{%                 endfor %}
{%             endfor %}
{%         endif %}
{#         old ACT standard way to build node connections #}
{%         for ifdata in node_ethernet_interfaces %}
{%             if "peer" in ifdata and "peer_interface" in ifdata and "." not in ifdata.name %}
{#                 add fabric connected nodes #}
{%                 if ifdata["peer"] in ansible_play_hosts_all and act_use_old_connections %}
{%                     set neighbordict = dict() %}
{%                     do neighbordict.update({"neighborDevice": ifdata["peer"] | replace("_", "-")}) %}
{%                     do neighbordict.update({"neighborPort": ifdata["peer_interface"]}) %}
{%                     do neighbordict.update({"port": ifdata.name}) %}
{%                     do node_dict[nodename]["neighbors"].append(neighbordict) %}
{#                 add non-fabric connected nodes if toggle is set and peer_type is within given map #}
{%                 elif act_add_connected_nodes == true and ifdata["peer_type"] in act_connected_nodes_map and act_use_old_connections %}
{%                     set peer_node = ifdata["peer"] | replace("_", "-") %}
{%                     set avd_ext_node_neighbordict = dict() %}
{%                     do avd_ext_node_neighbordict.update({"neighborDevice": nodename}) %}
{%                     do avd_ext_node_neighbordict.update({"neighborPort": ifdata.name}) %}
{%                     do avd_ext_node_neighbordict.update({"port": ifdata["peer_interface"]}) %}
{%                     if peer_node not in avd_ext_nodes and peer_node not in ansible_play_hosts_all %}
{%                         do avd_ext_nodes.update({peer_node: dict()}) %}
{%                         set mgmt_ip = act_connected_nodes_range | ansible.utils.ipaddr('network') | ansible.utils.ipmath(ns.avd_ext_nodes_count)  %}
{%                         set ns.avd_ext_nodes_count = ns.avd_ext_nodes_count + 1 %}
{%                         do avd_ext_nodes[peer_node].update({"IPV4": mgmt_ip}) %}
{%                         do avd_ext_nodes[peer_node].update({"node_type": act_connected_nodes_map[ifdata["peer_type"]]}) %}
{%                         do avd_ext_nodes[peer_node].update({"neighbors": []}) %}
{%                         do avd_ext_nodes[peer_node]["neighbors"].append(avd_ext_node_neighbordict) %}
{%                     else %}
{%                         do avd_ext_nodes[peer_node]["neighbors"].append(avd_ext_node_neighbordict) %}
{%                     endif %}
{%                     set neighbordict = dict() %}
{%                     do neighbordict.update({"neighborDevice": ifdata["peer"] | replace("_", "-")}) %}
{%                     do neighbordict.update({"neighborPort": ifdata["peer_interface"]}) %}
{%                     do neighbordict.update({"port": ifdata.name}) %}
{%                     do node_dict[nodename]["neighbors"].append(neighbordict) %}
{%                 endif %}
{%             endif %}
{%         endfor %}
{%         do nodes_list.update(node_dict) %}
{#      Add default ports to the node #}
{%     endif %}
{% endfor %}
{# Add the other nodes to the list #}
{% for node in avd_ext_nodes %}
{%     do nodes_list.append({ node: avd_ext_nodes[node] }) %}
{% endfor %}
{% if clab_add_tools_server %}
{%     do nodes_list.update({"tools-server": {"kind": "linux","mgmt-ipv4": clab_tools_server_ip,"env": {"STATIC_ROUTE": "10.0.0.0/8", "GW": "10.10.10.1" }}}) %}
{% endif %}
{% set nodes_data.nodes = {"nodes": nodes_list} %}
{# Build Topology #}
{% set kinds = dict() %}
{% do kinds.update({"arista_ceos": {"image": clab_eos_version ,"startup-config": clab_config_dir ~ "/" ~ clab_config_default  , "env": {"USERNAME": act_device_user, "PASSWORD": act_device_password, "CLAB_MGMT_VRF": "MGMT"}}}) %}
{# {% do kind.update({"generic": {"username": act_device_user, "password": act_device_password, "version": act_generic_os_version}}) %} #}
{% do kinds.update({"linux": {"image": clab_linux_image, "env" : {"USERNAME": "admin", "PASSWORD": "admin" }}}) %}
{# {% set t_kinds = dict({"kind": kinds})  %} #}
{% set topology.kinds = dict({"kinds": kinds})  %}
{% set topology.nodes = dict({"nodes": nodes_list})  %}
{% set topology.act_links = {"links": act_links} %}

